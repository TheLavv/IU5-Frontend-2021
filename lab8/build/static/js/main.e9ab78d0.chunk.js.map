{"version":3,"sources":["components/Task.jsx","components/InputButton.jsx","components/TODOList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Task","textAreaStyle","index","value","done","deleteTask","changeTask","toggleTask","className","id","type","onClick","defaultChecked","placeholder","defaultValue","onBlur","inputButton","TODOList","React","useState","tasks","setTasks","newTaskArr","useEffect","length","i","j","localStorage","getItem","toString","push","Number","event","newArr","map","el","target","UpdateStorage","tasksArr","clear","forEach","setItem","filter","task","window","location","reload","InputButton","inputTextArea","document","getElementById","cur_ind","Object","keys","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e9ab78d0.chunk.js","sourcesContent":["import React from 'react'\r\nimport './styles/Task.css'\r\n\r\nfunction Task( {index, value, done, deleteTask, changeTask, toggleTask} ) {\r\n    let textAreaStyle;\r\n    if (done)\r\n    {\r\n        textAreaStyle = 'container-textarea-doneTask';\r\n    }\r\n    else\r\n    {\r\n        textAreaStyle = 'container-textarea';\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <input id={index} type=\"checkbox\" onClick={toggleTask} defaultChecked={done}/>\r\n            <textarea className={textAreaStyle} id={'ta' + index} type=\"text\" placeholder=\"Change your task\" defaultValue={value} onBlur={changeTask}></textarea>\r\n            <button className=\"container-button\" id={index} onClick={deleteTask}>del</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task;","import React from 'react'\r\n\r\nfunction inputButton({onClick}) {\r\n    return (\r\n        <button id=\"inputButton\" onClick={onClick}>ADD</button>\r\n    );\r\n} \r\n\r\nexport default inputButton","import React, { useEffect } from 'react'\r\nimport './styles/TODOList.css'\r\nimport Task from './Task'\r\nimport InputButton from './InputButton'\r\n\r\nfunction TODOList() {\r\n    const [tasks, setTasks] = React.useState([]);\r\n    let newTaskArr = [];\r\n    useEffect(() => {\r\n        if (tasks.length === 0)\r\n        {\r\n            for (let i = 0, j = 0; true; i++)\r\n            {\r\n                if (j === localStorage.length / 3)\r\n                    break;\r\n                if (localStorage.getItem(`index${i.toString()}`) !== null)\r\n                {\r\n                    newTaskArr.push({index: localStorage.getItem(`index${i.toString()}`), value: localStorage.getItem(`value${i.toString()}`), done: Number(localStorage.getItem(`done${i.toString()}`))});\r\n                    j++;\r\n                }\r\n            }\r\n            setTasks(newTaskArr);\r\n        }\r\n    })\r\n    const toggleTask = (event) => {\r\n        let newArr = tasks.map((el) => {\r\n            if (Number(el.index) === Number(event.target.id))\r\n                el.done = el.done ^ 1;\r\n            return el;\r\n        });\r\n        setTasks(newArr);\r\n        UpdateStorage(newArr);\r\n    }\r\n    const UpdateStorage = (tasksArr) => {\r\n        localStorage.clear();\r\n        tasksArr.forEach((el) => {\r\n            localStorage.setItem(`index${el.index}`, el.index);\r\n            localStorage.setItem(`value${el.index}`, el.value);\r\n            localStorage.setItem(`done${el.index}`, el.done);\r\n        });\r\n    }\r\n    const changeTask = (event) => {\r\n        localStorage.setItem(`value${(event.target.id)[2]}`, event.target.value);\r\n    }\r\n    const addNewTask = () => {\r\n        const inputTextArea = document.getElementById('inputTextArea');\r\n        let cur_ind = 0;\r\n        Object.keys(localStorage).forEach((key) => {\r\n            if (key[0] === 'i')\r\n            {\r\n                if (localStorage.getItem(key) >= cur_ind)\r\n                    cur_ind = Number(localStorage.getItem(key)) + 1;\r\n            }\r\n        });\r\n        if (inputTextArea.value !== \"\")\r\n        {\r\n            setTasks([...tasks, {index: cur_ind, value: inputTextArea.value, done: 0}]);\r\n            UpdateStorage([...tasks, {index: cur_ind, value: inputTextArea.value, done: 0}]);\r\n            inputTextArea.value = \"\";\r\n        }\r\n    }\r\n    const deleteTask = (event) => {\r\n        setTasks(tasks.filter((task) => Number(task.index) !== Number(event.target.id)));\r\n        UpdateStorage(tasks.filter((task) => Number(task.index) !== Number(event.target.id)));\r\n        window.location.reload();\r\n    };\r\n    return (\r\n        <div className=\"page\">\r\n            <div className=\"page-header\">TASK MANAGER</div>\r\n            <div className=\"page-content\">\r\n                <p>\r\n                    Add new or change old task!\r\n                </p>\r\n                <hr />\r\n                <div className=\"page-content-input\">\r\n                    <textarea id=\"inputTextArea\" type=\"text\" placeholder=\"Enter new task\"/>\r\n                    <InputButton onClick={addNewTask}/>\r\n                </div>\r\n                <hr />\r\n                {\r\n                    tasks.map((el) => (\r\n                        <Task index={el.index} value={el.value} done={el.done} deleteTask={deleteTask} changeTask={changeTask} toggleTask={toggleTask}/>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TODOList;","import './App.css'\r\nimport React from 'react'\r\nimport TODOList from './components/TODOList'\r\n\r\nfunction App() {\r\n  return (\r\n    <TODOList />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}